/**
 * File:	include/slepos-system-manager/subwizards.ycp
 * Package:	Configuration of slepos-system-manager
 * Summary:	Wizards definitions
 * Authors:	Michael G. Fritch <mgfritch@novell.com>
 *
 * $Id: wizards.ycp,v 1.6 2004/02/05 11:29:30 msvec Exp $
 */

{

textdomain "slepos-system-manager";

import "Sequencer";
import "Wizard";

include "slepos-system-manager/complex.ycp";
include "slepos-system-manager/subdialogs.ycp";


/**
 * Workflow for adding/modifying a location LDAP object (scLocation)
 * @return sequence result
 */
any scLocationSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scLocationDetailsDialog1(object_key)),
		"details2"	: ``(scLocationDetailsDialog2(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: "details2",
		],
		"details2" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying branch server LDAP object (scBranchServer)
 * @return sequence result
 */
any scBranchServerSequence(string object_key) {

	map aliases = $[
		"details"	: ``(scBranchServerDetailsDialog(object_key)),
	];

	map sequence = $[
		"ws_start" : "details",
		"details" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying a Workstation LDAP object (scWorkstation)
 * @return sequence result
 */
any scWorkstationSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scWorkstationDetailsDialog1(object_key)),
		"details2"	: ``(scWorkstationDetailsDialog2(object_key)),
		"details3"	: ``(scWorkstationDetailsDialog3(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: "details2",
		],
		"details2" : $[
			`abort	: `abort,
			`next	: "details3",
		],
		"details3" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an Reference Object Container LDAP object (scRefObjectContainer)
 * @return sequence result
 */
any scRefObjectContainerSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scRefObjectContainerDetailsDialog(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an Distribution Container LDAP object (scDistributionContainer)
 * @return sequence result
 */
any scDistributionContainerSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scDistributionContainerDetailsDialog(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an Image LDAP object (scPosImage)
 * @return sequence result
 */
any scPosImageSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scPosImageDetailsDialog1(object_key)),
		"details2"	: ``(scPosImageDetailsDialog2(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: "details2",
		],
		"details2" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an harware LDAP object (scCashRegister)
 * @return sequence result
 */
any scCashRegisterSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scCashRegisterDetailsDialog(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying a hard disk LDAP object (scHarddisk)
 * @return sequence result
 */
any scHarddiskSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scHarddiskDetailsDialog(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying a RAM disk LDAP object (scRamDisk)
 * @return sequence result
 */
any scRamDiskSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scRamDiskDetailsDialog(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}



/**
 * Workflow for adding/modifying a network card LDAP object (scNetworkcard)
 * @return sequence result
 */
any scNetworkcardSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scNetworkcardDetailsDialog(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an high availability service template LDAP object (scHAService)
 * @return sequence result
 */
any scHAServiceSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scHAServiceDetailsDialog1(object_key)),
		"details2"	: ``(scHAServiceDetailsDialog2(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: "details2",
		],
		"details2" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an server service template LDAP object (scService)
 * @return sequence result
 */
any scServiceSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scServiceDetailsDialog1(object_key)),
		"details2"	: ``(scServiceDetailsDialog2(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: "details2",
		],
		"details2" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an File-Base configuration template LDAP object (scConfigFileSyncTemplate)
 * @return sequence result
 */
any scConfigFileSyncTemplateSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scConfigFileSyncTemplateDetailsDialog1(object_key)),
		"details2"	: ``(scConfigFileSyncTemplateDetailsDialog2(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: "details2",
		],
		"details2" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an LDAP-Base configuration template LDAP object (scConfigFileTemplate)
 * @return sequence result
 */
any scConfigFileTemplateSequence(string object_key) {

	map aliases = $[
		"details1"	: ``(scConfigFileTemplateDetailsDialog1(object_key)),
		"details2"	: ``(scConfigFileTemplateDetailsDialog2(object_key)),
	];

	map sequence = $[
		"ws_start" : "details1",
		"details1" : $[
			`abort	: `abort,
			`next	: "details2",
		],
		"details2" : $[
			`abort	: `abort,
			`next	: `next,
		],
	];

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");

	any ret = Sequencer::Run(aliases, sequence);

	UI::CloseDialog();
	return ret;
}


/**
 * Workflow for adding/modifying an LDAP-Base configuration template LDAP object (scConfigFileTemplate)
 * @param list<string> list of objectClasses
 * @return dialog result or if `next the objectClass of the selected object
 */
any SelectObjectTypeSequence(string current_item, list<string> objectClassList) {

	Wizard::CreateDialog();
	Wizard::SetDesktopIcon("slepos-system-manager");
	any ret = nil;
	if (current_item == nil || current_item == "") { // new object, let's ask the user what objectClass type to create
		ret = SelectObjectTypeDialog(objectClassList);
		if (is(ret, string)) objectClassList[0] = (string)ret; // a valid objectClass was selected!
		else {
			if (ret != `back || ret != `abort) y2error("Unknown return value: %1", ret);
			UI::CloseDialog();
			return ret;
		}
		SleposSystemManager::temp_ldap_object = [["objectClass", objectClassList[0]:""]]; // clear out any old stuff
	}
	else SleposSystemManager::temp_ldap_object = [];
	

	if (objectClassList[0]:"" == "scService") ret = scServiceSequence(current_item); // modifying a scService object
	else if (objectClassList[0]:"" == "scHAService") ret = scHAServiceSequence(current_item); // modifying a scHAService object
	else if (objectClassList[0]:"" == "scNetworkcard") ret = scNetworkcardSequence(current_item); // modifying a scNetworkcard object
	else if (objectClassList[0]:"" == "scHarddisk") ret = scHarddiskSequence(current_item); // modifying a scHarddisk object
	else if (objectClassList[0]:"" == "scRamDisk") ret = scRamDiskSequence(current_item); // modifying a scRamDisk object
	else if (objectClassList[0]:"" == "scConfigFileSyncTemplate") ret = scConfigFileSyncTemplateSequence(current_item); // modifying a scConfigFileSyncTemplate object
	else if (objectClassList[0]:"" == "scConfigFileTemplate") ret = scConfigFileTemplateSequence(current_item); // modifying a scConfigFileTemplate object
	else y2error("Unknown objectClass %1\nCannot display the dialog screen for this objectClass type: %1", objectClassList[0]:"");

	UI::CloseDialog();
	return ret;
}



/* EOF */
}
