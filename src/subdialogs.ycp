/**
 * File:        slepos-system-manager/subdialogs.ycp
 * Package:     Configuration YaST2 slepos-system-manager
 * Summary:     Configuration screens
 * Authors:     Michael G. Fritch <mgfritch@novell.com>
 *
 * $Id: subdialogs.ycp 21781 2005-02-21 15:29:52Z locilka $
 *
 * Configuration dialogs divided into smaller logic groups.
 */
{

textdomain "slepos-system-manager";

import "Label";
import "Popup";
import "SleposSystemManager";

include "slepos-system-manager/helps.ycp";
include "slepos-system-manager/routines.ycp";

// check if abort can be done without asking (= check for changes)
boolean ReallyAbort() {
    return !SleposSystemManager::Modified() || Popup::ReallyAbort(true);
}


// grab the location object from the list of LDAP objects
void init_temp_ldap_object (string object_key) {

    if (SleposSystemManager::temp_ldap_object == nil || SleposSystemManager::temp_ldap_object == [])
    {
	SleposSystemManager::temp_ldap_object = getObjectFromList (
	    object_key, SleposSystemManager::known_ldap_objects);
    }
}

// GLOBAL UI CONFIGURATION
term all_popup_definition = `opt(`decorated,`centered);

// TERM FUNCTIONS, WHOLE DIALOGS OR FRAMES

/**
 * Returns a detailed dialog for a given heading and body
 * @param body
 * @return term
 */
term TableSelectDialog (string heading, term body) {
    return `Frame (
	heading,
	`VBox (
	    `VWeight( 90, body),
	    `VWeight( 10 ,`HBox (
		`HSpacing(20),
		`PushButton(`id("ok"), Label::OKButton()),
		`PushButton(`id("cancel"), Label::CancelButton()),
		`HSpacing(20)
	    ))
	)
    );
}


/**
 * General function for handling a popup to select a
 * Image Reference Object (scPosImage) LDAP object
 * @param dn string of the item to defalut the table selection
 * @return string selected DN
 */
string HandlePopupSelectscPosImage (string current_dn) {

    // listing all known Image Reference objects (scPosImage)
    list<list> image_objects = SleposSystemManager::GetObjectsFromLDAP("scPosImage", nil, true);

    list<term> table_items = [];
    foreach (list object, image_objects, {
	string objectDN = getObjectValue("DN", object);
	string scImageName = getObjectValue("scImageName", object);
	string scPosImageVersion = getObjectValue("scPosImageVersion", object);

	// convert the DN into a domain name and then tokenize it using the '.' char
	list<string> tmplist = splitstring (GetDomainName(objectDN), ".");
	string DistContainer = tmplist[1]:"";
	string RefContainer = tmplist[2]:"";
	table_items = add (table_items, `item( `id(objectDN),
	    scImageName,
	    scPosImageVersion,
	    DistContainer,
	    RefContainer
	));
    });

    // Generate the pop-up dialog definition

    // dialog caption
    string caption = _("Select an Image Reference Object");
    term body = `VBox(
	`Table(`id("table_objects"), `header (
	    // table header item
	    _("Image Name"),
	    // table header item
	    _("Image Version"),
	    // table header item
	    _("Distribution Container"),
	    // table header item
	    _("Reference Object Container")),
	    table_items
	)
    );

    UI::OpenDialog (all_popup_definition, TableSelectDialog(caption, body));

    // Set the selected item in the table
    UI::ChangeWidget(`id ("table_objects"), `CurrentItem, current_dn);

    string current_item = "";
    string ret = "again";
    do {
	ret = (string) UI::UserInput();
	if (ret == "ok")
	{
	    current_item = (string) UI::QueryWidget(`id ("table_objects"), `CurrentItem);
	    if (current_item == nil || current_item == "")
	    {
		// popup error message
		Popup::Error (_("No Image Reference Object Selected.
Please, select an Image Reference Object"));
		ret = "again";
	    }
	}
    } while (ret == "again");

    UI::CloseDialog();

    y2milestone("HandlePopupSelectscPosImage returned: %1", current_item);
    return current_item;
}



/**
 * General function for handling a popup to select a
 * Image Reference Object (scPosImage) LDAP object
 * @param dn string of the item to defalut the table selection
 * @return string selected DN
 */
string HandlePopupSelectscCashRegister (string current_dn) {

    // listing all known Hardware Reference objects (scCashRegister)
    list<list> image_objects = SleposSystemManager::GetObjectsFromLDAP("scCashRegister", nil, true);
    list <term> table_items = [];
    foreach (list object, image_objects, {
	string objectDN = getObjectValue("DN", object);
	string cn = getObjectValue("cn", object);
	string scCashRegisterName =
	    getObjectValue("scCashRegisterName", object);
	// convert the DN into a domain name and then tokenize it using the '.' char
	list<string> tmplist = splitstring (GetDomainName(objectDN), ".");
	string RefContainer = tmplist[1]:"";
	table_items = add (table_items, `item( `id(objectDN),
	    cn,
	    scCashRegisterName,
	    RefContainer
	));
    });

    // dialog caption
    string caption = _("Select a Hardware Reference Object");
    term body = `VBox(
	`Table(`id("table_objects"), `header (
	    // table header item
	    _("Hardware Name"),
	    // table header item
	    _("Model Type"),
	    // table header item
	    _("Reference Object Container")), table_items
	)
    );

    UI::OpenDialog (all_popup_definition, TableSelectDialog (caption, body));
    UI::ChangeWidget(`id ("table_objects"), `CurrentItem, current_dn);

    string current_item = "";
    string ret = "again";
    do {
	ret = (string) UI::UserInput();
	if (ret == "ok")
	{
	    current_item = (string) UI::QueryWidget(`id ("table_objects"), `CurrentItem);
	    if (current_item == nil || current_item == "")
	    {
		// error message
		Popup::Error(_("No Hardware Reference Object Selected.\nPlease, select a Hardware Reference Object"));
		ret = "again";
	    }
	}
    } while (ret == "again");

    UI::CloseDialog();

    y2milestone("HandlePopupSelectscCashRegister returned: %1", current_item);
    return current_item;
}


/**
 * Returns dialog with a table summary for any LDAP object with add, remove, modify buttons.
 * @return term
 */
term ObjectTableDialog (string caption) {

    return `Frame (caption,
	`VBox (
	    `Table (`id("table_objects"), `header (
		// table header item
		_("Name"),
		// table header item
		_("Type")), []
	    ),
	    `HBox (
		`PushButton (`id("add_object"), Label::AddButton ()),
		`PushButton (`id("modify_object"), ModifyButton ()),
		`PushButton(`id("remove_object"), Label::RemoveButton ())
	    )
	)
    );
}


/**
 * Displays a dialog with radio buttons to select an LDAP object from a list of specified objects
 * @param list<string> list of objectClasses
 * @return dialog result or if `next the objectClass of the selected object
 */
any SelectObjectTypeDialog(list<string> objectClassList) {

    if (objectClassList == nil || size(objectClassList) < 1) return nil;

    map objectClass2text	= $[
	// radiobutton label
	"scConfigFileSyncTemplate"	: _("&File-Based Configuration Template"),
	// radiobutton label
	"scConfigFileTemplate"		: _("&LDAP-Based Configuration Template"),
	// radiobutton label
	"scHarddisk"			: _("&Hard Disk"),
	// radiobutton label
	"scRamDisk"			: _("&Ram Disk"),
	// radiobutton label
	"scNetworkcard"			: _("N&etwork Card"),
	// radiobutton label
	"scService"			: _("Network &Service"),
	// radiobutton label
	"scHAService"			: _("High &Availability Service"),
    ];

    // dialog caption
    string caption = _("Select Type");
    term radioButtons = `VBox();
    foreach (string objectClass, objectClassList, {
	string text	= objectClass2text[objectClass]:"";
	if (text != "")
	    radioButtons = add (radioButtons, `Left (`RadioButton (`id(objectClass), text)));
	else
	    y2error ("Unknown objectClass type: %1", objectClass);
    });

    term contents = `HVSquash(`Frame( caption, `VBox(
	`RadioButtonGroup(`id(`rb), radioButtons)
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("select_object_type"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel || ret == `back)
	{
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    ret = UI::QueryWidget(`id(`rb), `CurrentButton);
	    if (ret == nil)
	    {
		// error popup
		Popup::Error(_("A type must be selected."));  // FIXME: need a more descriptive error message.
		continue;
	    }
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Returns dialog with a table summary of the branch locations (scLocation) with add, remove, modify buttons.
 * @return term
 */
term scLocationTableDialog () {

    // frame label
    return `Frame (_("Branch Locations"), `VBox (
	`Table (
	    `id("table_scLocation"),
	    `header (
		// table header item
		_("Branch Name"),
		// table header item
		_("Location"),
		// table header item
		_("Network Number"),
		// table header item
		_("Netmask")
	    ), []
	),
	`HBox (
	    `PushButton (`id("add_scLocation"), Label::AddButton ()),
	    `PushButton (`id("modify_scLocation"), ModifyButton ()),
	    `PushButton (`id("remove_scLocation"), Label::RemoveButton ())
	)
    ));
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a location object (scLocation, organizationalUnit)
 * @param string object_key (DN)
 * @return dialog result
 */
any scLocationDetailsDialog1(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);

    // frame label
    string caption = newObject ? _("Create Branch Location") :
	// frame label
	_("Modify Branch Location");

    list temp_object	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", temp_object);
    string ipNetworkNumber = getObjectValue("ipNetworkNumber", temp_object);
    string ipNetmaskNumber = getObjectValue("ipNetmaskNumber", temp_object);
    string scDhcpRange = getObjectValue("scDhcpRange", temp_object);
    string scDhcpFixedRange = getObjectValue("scDhcpFixedRange", temp_object);
    string scDefaultGw = getObjectValue("scDefaultGw", temp_object);
    string scDynamicIp = getObjectValue("scDynamicIp", temp_object);

    // Generate the DNS domain name of the branch location using the LDAP object DN
    string dn = getObjectValue("DN", temp_object);
    string location = GetDomainName (dn);

    term contents = `HVSquash (`Frame (caption, `VBox (
	// text entry label
	`Left(`TextEntry(`id(`cn), _("Location Name"), cn)), //FIXME: should we grab the first part of the location (up to first period) to use as the cn and not ask for this value?
	// text entry label
	`Left(`TextEntry(`id(`location), _("DNS Location"), location)), // FIXME: should this be called 'location domain name' instead???
	// text entry label
	`Left(`TextEntry(`id(`ipNetworkNumber), _("Network Number"), ipNetworkNumber)),
	// text entry label
	`Left(`TextEntry(`id(`ipNetmaskNumber), _("Netmask"), ipNetmaskNumber)),
	// text entry label
	`Left(`TextEntry(`id(`scDhcpRange), _("DHCP Range"), scDhcpRange)),
	// text entry label
	`Left(`TextEntry(`id(`scDhcpFixedRange), _("DHCP Fixed Range"), scDhcpFixedRange)),
	// text entry label
	`Left(`TextEntry(`id(`scDefaultGw), _("Default Gateway"), scDefaultGw)),
	// combo box label
	`Left(`ComboBox(`id(`scDynamicIp), _("Use Dynamic IP"), ["TRUE", "FALSE"]))
	// FIXME translate values
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scLocation_details1"),
	Label::BackButton(), Label::NextButton());

    // Make sure the combo box defaults to the appropriate value
    UI::ChangeWidget(`id(`scDynamicIp), `Value, toupper(scDynamicIp));

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	if(ret == `abort || ret == `cancel || ret == `back) {
		if(ReallyAbort()) break;
		else continue;
	}
	else if (ret == `next)
	{
	    cn			= (string)UI::QueryWidget(`id(`cn), `Value);
	    location		= (string)UI::QueryWidget(`id(`location), `Value);
	    ipNetworkNumber	= (string)UI::QueryWidget(`id(`ipNetworkNumber), `Value);
	    ipNetmaskNumber	= (string)UI::QueryWidget(`id(`ipNetmaskNumber), `Value);
	    scDhcpRange		= (string)UI::QueryWidget(`id(`scDhcpRange), `Value);
	    scDhcpFixedRange	= (string)UI::QueryWidget(`id(`scDhcpFixedRange), `Value);
	    scDefaultGw		= (string)UI::QueryWidget(`id(`scDefaultGw), `Value);
	    scDynamicIp		= toupper((string)UI::QueryWidget(`id(`scDynamicIp), `Value));

	    if (cn == nil || cn == "")
	    {
		// error message (missing entry)
		Popup::Error(_("Location name is required."));
		continue;
	    }
	    // text entry label
	    if (!ValidateDNSorIPMsg (location, _("DNS location")))
		continue; // FIXME: should this be called 'location domain name' instead???
	    // text entry label
	    if (!ValidateIPMsg (ipNetworkNumber, _("Network Number")))
		continue;
	    // text entry label
	    if (!ValidateIPMsg(ipNetmaskNumber, _("Netmask")))
		continue;
	    if (scDhcpRange == nil || scDhcpRange == "")
	    {
		// error message
		Popup::Error(_("DHCP range required."));
		continue;
	    }
	    if (scDhcpFixedRange == nil || scDhcpFixedRange == "") {
		// error message
		Popup::Error(_("DHCP fixed range required."));
		continue;
	    }
	    // text entry label
	    if (!ValidateIPMsg(scDefaultGw, _("Default Gateway")))
		continue;
	    if (scDynamicIp == nil || scDynamicIp == "") {
		// error message
		Popup::Error(_("Dynamic IP required."));
		continue;
	    }

	    //modify the current location object
	    y2milestone("OLD settings=%1", SleposSystemManager::temp_ldap_object);
	    temp_object = setObjectValues("cn", cn, temp_object);
	    temp_object = setObjectValues("location", location, temp_object);
	    temp_object = setObjectValues("ipNetworkNumber", ipNetworkNumber, temp_object);
	    temp_object = setObjectValues("ipNetmaskNumber", ipNetmaskNumber, temp_object);
	    temp_object = setObjectValues("scDhcpRange", scDhcpRange, temp_object);
	    temp_object = setObjectValues("scDhcpFixedRange", scDhcpFixedRange, temp_object);
	    temp_object = setObjectValues("scDefaultGw", scDefaultGw, temp_object);
	    temp_object = setObjectValues("scDynamicIp", scDynamicIp, temp_object);
	    SleposSystemManager::temp_ldap_object	= temp_object;
	    y2milestone("NEW settings=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}



/**
 * Displays a dialog to add/modify all LDAP object values required for a location object (scLocation, organizationalUnit)
 * @param string object_key (DN)
 * @return dialog result
 */
any scLocationDetailsDialog2(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create Branch Location") :
	// frame label
	_("Modify Branch Location");

    list temp_object	= SleposSystemManager::temp_ldap_object;

    // May attributes
    string scLdapDn = getObjectValue("scLdapDn", temp_object);
    string scDnsDn = getObjectValue("scDnsDn", temp_object);
    string scPrinterBaseName = getObjectValue("scPrinterBaseName",temp_object);
    string scEnumerationMask = getObjectValue("scEnumerationMask",temp_object);
    string associatedDomain = getObjectValue("associatedDomain", temp_object);
    string scWorkstationBaseName = getObjectValue("scWorkstationBaseName", temp_object);

    // set defaults for values that do not exist.
    if (scWorkstationBaseName == nil || scWorkstationBaseName == "")
	scWorkstationBaseName = "CR";
    if (scEnumerationMask == nil || scEnumerationMask == "")
	scEnumerationMask = "000";

    term contents = `HVSquash (`Frame (caption, `VBox (
	// text entry label
	`Left(`TextEntry(`id(`scLdapDn), _("scLdapDn"), scLdapDn)), //FIXME: what to call this???
	// text entry label
	`Left(`TextEntry(`id(`scDnsDn), _("scDnsDn"), scDnsDn)), // FIXME: what to call this???
	// text entry label
	`Left(`TextEntry(`id(`scWorkstationBaseName), _("Workstation Base Name"),
	    scWorkstationBaseName)),
	// text entry label
	`Left(`TextEntry(`id(`scPrinterBaseName), _("Printer Base Name"), scPrinterBaseName)),
	// text entry label
	`Left(`TextEntry(`id(`scEnumerationMask), _("Enumeration Mask"), scEnumerationMask)),
	// text entry label
	`Left(`TextEntry(`id(`associatedDomain), _("Associated Domain"), associatedDomain))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scLocation_details2"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel ){
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next)
	{
	    scLdapDn = (string)UI::QueryWidget(`id(`scLdapDn), `Value);
	    scDnsDn = (string)UI::QueryWidget(`id(`scDnsDn), `Value);
	    scWorkstationBaseName = (string)UI::QueryWidget(`id(`scWorkstationBaseName), `Value);
	    scPrinterBaseName = (string)UI::QueryWidget(`id(`scPrinterBaseName), `Value);
	    scEnumerationMask = (string)UI::QueryWidget(`id(`scEnumerationMask), `Value);
	    associatedDomain = (string)UI::QueryWidget(`id(`associatedDomain), `Value);

	    //modify the current location object
	    y2milestone("OLD settings=%1", SleposSystemManager::temp_ldap_object);
	    temp_object = setObjectValues("scLdapDn", scLdapDn, temp_object);
	    temp_object = setObjectValues("scDnsDn", scDnsDn, temp_object);

	    //FIXME: see bugzilla #145695
	    temp_object = removeObjectValues("scWorkstationBaseName", temp_object);
	    temp_object = setObjectValues("scWorkstationBasename", scWorkstationBaseName, temp_object);
	    //FIXME: see bugzilla #145695
	    temp_object = setObjectValues("scPrinterBaseName", scPrinterBaseName, temp_object);
	    temp_object = setObjectValues("scEnumerationMask", scEnumerationMask, temp_object);
	    temp_object = setObjectValues("associatedDomain", associatedDomain, temp_object);
	    SleposSystemManager::temp_ldap_object	= temp_object;
	    y2milestone("NEW setgings=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}



/**
 * Returns dialog with a table summary of the branch servers with add, remove, modify buttons.
 * @return term
 */
term scBranchServer_scWorkstation_TableDialog () {
    return `VBox (
	// frame label
	`Frame (_("Branch Servers"), `VBox (
	    `Table (`id("table_scBranchServer"), `header (
		// table header item
		_("Server Name"),
		// table header item
		_("DNS Name")), []
	    ),
	    `HBox (
		`PushButton (`id("add_scBranchServer"), Label::AddButton ()),
		`PushButton (`id("modify_scBranchServer"), ModifyButton ()),
		`PushButton (`id("remove_scBranchServer"), Label::RemoveButton ())
	    )
	)),
	`VSpacing(1),
	// frame label
	`Frame (_("Workstations"), `VBox (
	    `Table (`id("table_scWorkstation"), `header (
		// table header item
		_("Workstation Name"),
		// table header item
		_("DNS Name"),
		// table header item
		_("MAC Address"),
		// table header item
		_("IP Address")), []
	    ),
	    `HBox (
		`PushButton(`id("add_scWorkstation"), Label::AddButton ()),
		`PushButton(`id("modify_scWorkstation"), ModifyButton ()),
		`PushButton(`id("remove_scWorkstation"), Label::RemoveButton ())
	    )
	))
    );
}

/**
 * Displays a dialog to add/modify all LDAP object values required for a branch server object (scBranchServer, scServerContainer)
 * @param string object_key (DN)
 * @return dialog result
 */
any scBranchServerDetailsDialog(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);

    // frame label
    string caption = newObject ? _("Create Branch Server") :
	// frame label
	_("Modify Branch Server");

    list temp_object	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", temp_object);
    // May objects
    string scRefServerDn = getObjectValue("scRefServerDn", temp_object);
//	string scPubKey = getObjectValue("scPubKey", temp_object); // FIXME: Temporary bug fix by removing scPubKey from the UI. See bugzilla #146385

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry
	`Left(`TextEntry(`id(`cn), _("Branch Server Name"), cn)),
	// text entry
	`Left(`TextEntry(`id(`scRefServerDn), _("scRefServerDn (optional)"), scRefServerDn))
//		`Left(`TextEntry(`id(`scPubKey), _("Public Key (optional)"), scPubKey)) // FIXME: Temporary bug fix by removing scPubKey from the UI. See bugzilla #146385
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scBranchServer_details"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    scRefServerDn = (string)UI::QueryWidget(`id(`scRefServerDn), `Value);
	    if (cn == nil || cn == "")
	    {
		//error message
		Popup::Error(_("Branch server name required."));
		continue;
	    }
	    //modify the current branch server object
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    temp_object = setObjectValues("cn", cn, temp_object);
	    temp_object = setObjectValues("scRefServerDn", scRefServerDn, temp_object);
	    SleposSystemManager::temp_ldap_object	= temp_object;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}



/**
 * Displays a dialog to add/modify all LDAP object values required for a workstation object (scWorkstation)
 * @param string object_key (DN)
 * @return dialog result
 */
any scWorkstationDetailsDialog1(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);

    // frame label
    string caption = newObject ? _("Create Workstation") :
	// frame label
	_("Modify Workstation");

    list temp_object	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", temp_object); // FIXME: should read the scLocation object to get the workstationBaseName and scEnumerationMask. These could be used to default this value if it is empty!
    string macAddress = getObjectValue("macAddress", temp_object);
    string ipHostNumber = getObjectValue("ipHostNumber", temp_object);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry
	`TextEntry(`id(`cn), _("Host Name"), cn),
	// text entry
	`TextEntry(`id(`macAddress), _("MAC Address"), macAddress),
	// text entry
	`TextEntry(`id(`ipHostNumber), _("IP Address"), ipHostNumber)
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scWorkstation_details1"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next) {
	    cn			= (string)UI::QueryWidget(`id(`cn), `Value);
	    macAddress		= (string)UI::QueryWidget(`id(`macAddress), `Value);
	    ipHostNumber	= (string)UI::QueryWidget(`id(`ipHostNumber), `Value);
	
	    if (cn == nil || cn == "") {
		// error message
		Popup::Error(_("Workstation host name required."));
		UI::SetFocus (`id (`cn));
		continue;
	    }
	    if (macAddress == nil || macAddress == "")
	    {
		// error message
		Popup::Error(_("MAC Address required."));
		UI::SetFocus (`id (`macAddress));
		continue;
	    }
	    // text entry label
	    if (!ValidateIPMsg (ipHostNumber, _("IP Address")))
		continue;

	    //modify the current branch server object
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    temp_object = setObjectValues("cn", cn, temp_object);
	    temp_object = setObjectValues("macAddress", macAddress, temp_object);
	    temp_object = setObjectValues("ipHostNumber", ipHostNumber, temp_object);
	    SleposSystemManager::temp_ldap_object	= temp_object;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else {
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a workstation object (scWorkstation)
 * @param string object_key (DN)
 * @return dialog result
 */
any scWorkstationDetailsDialog2(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create Workstation") :
	// frame label
	_("Modify Workstation");

    list obj	= SleposSystemManager::temp_ldap_object;

    string scSerialNumber = getObjectValue("scSerialNumber", obj);
    string scRefPcDn = getObjectValue("scRefPcDn", obj);
    string scPosImageDn = getObjectValue("scPosImageDn", obj);
    string scPosImageVersion = getObjectValue("scPosImageVersion", obj);
    string scPOSRegisterBiosVersion = getObjectValue("scPOSRegisterBiosVersion", obj);
    string scConfigFileDn = getObjectValue("scConfigFileDn", obj);
    string scStandardPrinterDn = getObjectValue("scStandardPrinterDn", obj);

    term contents = `HVSquash(`Frame( caption, `VBox (
	// text entry label
	`TextEntry(`id(`scSerialNumber), _("Serial Number"), scSerialNumber),
	`HBox(
	    // text entry label
	    `TextEntry(`id(`scRefPcDn), _("Hardware Reference Object"), scRefPcDn),
	    `HSpacing(1),
	    `VBox(
		`Label(""),
		`PushButton(`id(`scRefPcDn_browse), Label::BrowseButton())
	    )
	),
	`HBox(
	    `VBox(
		// text entry label
		`TextEntry(`id(`scPosImageDn), _("Default Image"), scPosImageDn),
		// text entry label
		`TextEntry(`id(`scPosImageVersion), _("Image Version"), scPosImageVersion)
	    ),
	    `HSpacing(1),
	    `VBox(
		`Label(" "),
		`PushButton(`id(`scPosImageDn_browse), Label::BrowseButton())
	    )
	),
	// text entry label
	`TextEntry(`id(`scPOSRegisterBiosVersion), _("Register Bios Version"),
	    scPOSRegisterBiosVersion),
	`TextEntry(`id(`scConfigFileDn), _("Config File DN"), scConfigFileDn),
	`TextEntry(`id(`scStandardPrinterDn), _("Standard Printer DN"), scStandardPrinterDn)
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scWorkstation_details2"),
	Label::BackButton(), Label::NextButton());

    // NOTE: do not let the user modify this values. The browse button should be used to select the appropriate values.
    UI::ChangeWidget(`id(`scRefPcDn), `Enabled, false);
    UI::ChangeWidget(`id(`scPosImageDn), `Enabled, false);
    UI::ChangeWidget(`id(`scPosImageVersion), `Enabled, false);

    // Set values for the widgets with browse buttons
    list<list> tmp_objects = SleposSystemManager::GetObjectsFromLDAP("scPosImage", nil, true);
    list tmp_object = getObjectFromList (scPosImageDn, tmp_objects);

    UI::ChangeWidget(`id(`scPosImageDn), `Value, getObjectValue("scImageName", tmp_object));
    UI::ChangeWidget(`id(`scPosImageVersion), `Value, getObjectValue("scPosImageVersion", tmp_object));
    tmp_objects = SleposSystemManager::GetObjectsFromLDAP("scCashRegister", nil, true);
    tmp_object = getObjectFromList(scRefPcDn, tmp_objects);
    UI::ChangeWidget(`id(`scRefPcDn), `Value, getObjectValue("cn",tmp_object));

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if(ret == `next)
	{
	    scSerialNumber = (string)UI::QueryWidget(`id(`scSerialNumber), `Value);
	    scPosImageVersion = (string)UI::QueryWidget(`id(`scPosImageVersion), `Value);
	    scPOSRegisterBiosVersion = (string)UI::QueryWidget(`id(`scPOSRegisterBiosVersion), `Value);
	    scConfigFileDn = (string)UI::QueryWidget(`id(`scConfigFileDn), `Value);
	    scStandardPrinterDn = (string)UI::QueryWidget(`id(`scStandardPrinterDn), `Value);

	    //modify the current branch server object
	    y2debug("OLD SleposSystemManager::temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("scSerialNumber", scSerialNumber, obj);
	    obj = setObjectValues("scRefPcDn", scRefPcDn, obj);
	    obj = setObjectValues("scPosImageDn", scPosImageDn, obj);
	    obj = setObjectValues("scPosImageVersion", scPosImageVersion, obj);
	    obj = setObjectValues("scPOSRegisterBiosVersion", scPOSRegisterBiosVersion, obj);
	    obj = setObjectValues("scConfigFileDn", scConfigFileDn, obj);
	    obj = setObjectValues("scStandardPrinterDn", scStandardPrinterDn, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2debug("NEW SleposSystemManager::temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else if (ret == `scPosImageDn_browse)
	{
	    string image_dn = HandlePopupSelectscPosImage(scPosImageDn);
	    if (image_dn != nil && image_dn != "")
	    {
		// must convert the image_dn into a value that does not look like a dn .... we shouldn't expose dn values to the UI.
		tmp_objects = SleposSystemManager::GetObjectsFromLDAP("scPosImage", nil, true);
		tmp_object = getObjectFromList(image_dn, tmp_objects);
		UI::ChangeWidget(`id(`scPosImageDn), `Value, getObjectValue("scImageName", tmp_object));
		UI::ChangeWidget(`id(`scPosImageVersion), `Value, getObjectValue("scPosImageVersion", tmp_object));
		scPosImageDn = image_dn; // NOTE: set this value now, rather than using QueryWidget later
	    }
	}
	else if (ret == `scRefPcDn_browse) {
	    string hardware_dn = HandlePopupSelectscCashRegister(scRefPcDn);
	    if (hardware_dn != nil && hardware_dn != "")
	    {
		// must convert the hardware_dn into a value that does not look like a dn .... we shouldn't expose dn values to the UI.
		tmp_objects = SleposSystemManager::GetObjectsFromLDAP("scCashRegister", nil, true);
		tmp_object = getObjectFromList(hardware_dn, tmp_objects);
		UI::ChangeWidget(`id(`scRefPcDn), `Value, getObjectValue("cn", tmp_object));
		scRefPcDn = hardware_dn; // NOTE: set this value now, rather than using QueryWidget later
	    }
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a workstation object (scWorkstation)
 * @param string object_key (DN)
 * @return dialog result
 */
any scWorkstationDetailsDialog3(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create Workstation") :
	// frame label
	_("Modify Workstation");

    list obj	= SleposSystemManager::temp_ldap_object;

    // May objects
    string userPassword = getObjectValue("userPassword", obj);
    string scStandardPrinter = getObjectValue("scStandardPrinter",obj);
    string scPOSGroupDn = getObjectValue("scPOSGroupDn", obj);
    string scDiskJournal = getObjectValue("scDiskJournal", obj);
    string scConfigUpdate = getObjectValue("scConfigUpdate", obj);
    string scNotifiedImage = getObjectValue("scNotifiedImage", obj);


    term contents = `HVSquash(`Frame( caption, `VBox(
	// password widget label
	`Left(`Password(`id("userPassword"), _("User Password"), userPassword)),
	// text entry label
	`Left(`TextEntry(`id("scStandardPrinter"), _("Standard Printer"), scStandardPrinter)),
	// text entry label
	`Left(`TextEntry(`id("scPOSGroupDn"), _("POS Group DN"), scPOSGroupDn)),
	// text entry label
	`Left(`TextEntry(`id("scDiskJournal"), _("Disk Journal"), scDiskJournal)),
	// text entry label
	`Left(`TextEntry(`id("scConfigUpdate"), _("Config Update"), scConfigUpdate)),
	// text entry label
	`Left(`TextEntry(`id("scNotifiedImage"), _("Notified Image"), scNotifiedImage))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scWorkstation_details3"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if(ret == `next)
	{
	    //modify the current branch server object
	    y2debug("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    foreach (string attr, [ "userPassword","scStandardPrinter","scPOSGroupDn",
		"scDiskJournal", "scConfigUpdate", "scNotifiedImage" ],
	    {
		obj = setObjectValues (attr, (string)UI::QueryWidget (`id(attr), `Value), obj);
	    });
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2debug("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Returns dialog with a table summary of Referenece object containers (scRefObjectContainer) with add, remove, modify buttons.
 * @return term
 */
term scRefObjectContainerTableDialog () {
    // frame label
    return `Frame (_("Reference Object Containers"),
	`VBox (
	    `Table (`id("table_scRefObjectContainer"), `header (
		// table header item
		_("Container Name")), []
	    ),
	    `HBox (
		`PushButton (`id("add_scRefObjectContainer"), Label::AddButton ()),
		`PushButton (`id("modify_scRefObjectContainer"), ModifyButton ()),
		`PushButton (`id("remove_scRefObjectContainer"), Label::RemoveButton ())
	    )
	)
    );
}

/**
 * Displays a dialog to add/modify all LDAP object values required for a reference object container (scRefObjectContainer)
 * @param string object_key (DN)
 * @return dialog result
 */
any scRefObjectContainerDetailsDialog(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);

    // frame label
    string caption = newObject ? _("Create Reference Object Container") :
	// frame label
	_("Modify Reference Object Container");

    // Must attributes
    string cn = getObjectValue("cn", SleposSystemManager::temp_ldap_object);
    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`cn), _("Container Name"), cn))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scRefObjectContainer_details"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    if (cn == nil || cn == "")
	    {
		// error message
		Popup::Error(_("Container name required."));
		UI::SetFocus (`id (`cn));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object = setObjectValues (
		"cn", cn, SleposSystemManager::temp_ldap_object);
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Returns dialog with a table summary of distribution containers with add, remove, modify buttons.
 * @return term
 */
term scDistributionContainer_scCashRegister_TableDialog () {
    return `VBox(
	// frame label
	`Frame (_("Distribution Containers"), `VBox (
	    `Table (`id("table_scDistributionContainer"), `header (
		// table header item
		_("Container Name"),
		// table header item
		_("Kernel Version"),
		// table header item
		_("Kernel Name"),
		// table header item
		_("Initrd Name"),
		// table header item
		_("Kernel Match")), []
	    ),
	    `HBox (
		`PushButton (`id("add_scDistributionContainer"), Label::AddButton ()),
		`PushButton (`id("modify_scDistributionContainer"), ModifyButton ()),
		`PushButton (`id("remove_scDistributionContainer"), Label::RemoveButton ())
	    )
	)),
	`VSpacing(1),
	// frame label
	`Frame (_("Hardware Reference Objects"), `VBox (
	    `Table (`id("table_scCashRegister"), `header (
		// table header item
		_("Name"),  // cn
		// table header item
		_("Model Type"), // scCashRegisterName
		// table header item
		_("Default Image"), // scPosImageDn
		// table header item
		_("Use Disk Journal")), []
	    ),
	    `HBox (
		`PushButton (`id("add_scCashRegister"), Label::AddButton ()),
		`PushButton (`id("modify_scCashRegister"), ModifyButton ()),
		`PushButton (`id("remove_scCashRegister"), Label::RemoveButton ())
	    )
	))
    );
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a distribution container (scDistributionContainer)
 * @param string object_key (DN)
 * @return dialog result
 */
any scDistributionContainerDetailsDialog(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);

    // frame label
    string caption = newObject ? _("Create Distribution Container") :
	// frame label
	_("Modify Distribution Container");

    list temp_object	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", temp_object);
    string scKernelName = getObjectValue("scKernelName", temp_object);
    string scInitrdName = getObjectValue("scInitrdName", temp_object);
    string scKernelVersion = getObjectValue("scKernelVersion", temp_object);
    string scKernelMatch = getObjectValue("scKernelMatch", temp_object);
    // May attribuites
    string scKernelExpression = getObjectValue("scKernelExpression", temp_object);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`cn), _("Container Name"), cn)),
	// text entry label
	`Left(`TextEntry(`id(`scKernelName), _("Kernel Name"), scKernelName)),
	// text entry label
	`Left(`TextEntry(`id(`scInitrdName), _("Initrd Name"), scInitrdName)),
	// text entry label
	`Left(`TextEntry(`id(`scKernelVersion), _("Kernel Version"), scKernelVersion)),
	// text entry label
	`Left(`TextEntry(`id(`scKernelMatch), _("Kernel Match"), scKernelMatch)), // FIXME: is there a finite list that we can use to display this value in a ComboBox
	// text entry label
	`Left(`TextEntry(`id(`scKernelExpression), _("Kernel Expression (optional)"), scKernelExpression)) // FIXME: is there a finite list that we can use to display this value in a ComboBox
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scDistributionContainer_details"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    scKernelName = (string)UI::QueryWidget(`id(`scKernelName), `Value);
	    scInitrdName = (string)UI::QueryWidget(`id(`scInitrdName), `Value);
	    scKernelVersion = (string)UI::QueryWidget(`id(`scKernelVersion), `Value);
	    scKernelMatch = (string)UI::QueryWidget(`id(`scKernelMatch), `Value);
	    scKernelExpression = (string)UI::QueryWidget(`id(`scKernelExpression), `Value);

	    if (cn == nil || cn == "") {
		// error message
		Popup::Error(_("Container name is required."));
		UI::SetFocus (`id (`cn));
		continue;
	    }
	    if (scKernelName == nil || scKernelName == "") {
		// error message
		Popup::Error(_("Kernel name is required."));
		UI::SetFocus (`id (`scKernelName));
		continue;
	    }
	    if (scInitrdName == nil || scInitrdName == "") {
		// error message
		Popup::Error(_("Initrd name is required."));
		UI::SetFocus (`id (`scInitrdName));
		continue;
	    }
	    if (scKernelVersion == nil || scKernelVersion == "") {
		// error message
		Popup::Error(_("Kernel version is required."));
		UI::SetFocus (`id (`scKernelVersion));
		continue;
	    }
	    if (scKernelMatch == nil || scKernelMatch == "") {
		// error message
		Popup::Error(_("Kernel match is required."));
		UI::SetFocus (`id (`scKernelMatch));
		continue;
	    }

	    //modify the current branch server object
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    temp_object = setObjectValues("cn", cn, temp_object);
	    temp_object = setObjectValues("scKernelName", scKernelName, temp_object);
	    temp_object = setObjectValues("scInitrdName", scInitrdName, temp_object);
	    temp_object = setObjectValues("scKernelVersion", scKernelVersion, temp_object);
	    temp_object = setObjectValues("scKernelMatch", scKernelMatch, temp_object);
	    temp_object = setObjectValues("scKernelExpression", scKernelExpression, temp_object);
	    SleposSystemManager::temp_ldap_object	= temp_object;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a hardware reference object (scCashRegister)
 * @param string object_key (DN)
 * @return dialog result
 */
any scCashRegisterDetailsDialog(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);

    // frame label
    string caption = newObject ? _("Create Hardware Reference Object") :
	// frame label
	_("Modify Hardware Reference Object");

    list obj	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", obj);
    string scCashRegisterName = getObjectValue("scCashRegisterName", obj);
    // May attributes
    string scPosImageDn = getObjectValue("scPosImageDn", obj);
    string scDiskJournal = getObjectValue("scDiskJournal", obj);

    if (scDiskJournal == nil || scDiskJournal == "") scDiskJournal = "FALSE";

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`TextEntry(`id(`cn), _("Name"), cn), // FIXME: how does this compare to the scCashRegisterName?
	// text entry label
	`TextEntry(`id(`scCashRegisterName), _("Model Type"), scCashRegisterName), // FIXME: how does this compare with the cn?
	`HBox(
	    `TextEntry(`id(`scPosImageDn), _("Default Image (optional)"), scPosImageDn),
	    `HSpacing(1),
	    `VBox(
		`Label(" "),
		`PushButton(`id(`scPosImageDn_browse), Label::BrowseButton())
	    )
	),
	// combo box label
	`Left(`ComboBox(`id(`scDiskJournal), _("Use Disk Journal (optional)"), ["TRUE", "FALSE"]))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scCashRegister_details"),
	Label::BackButton(), Label::NextButton());

    UI::ChangeWidget(`id(`scPosImageDn), `Enabled, false);

    // Set values for the widgets with browse buttons
    list <list> tmp_objects = SleposSystemManager::GetObjectsFromLDAP("scPosImage", nil, true);
    list tmp_object = getObjectFromList(scPosImageDn, tmp_objects);
    UI::ChangeWidget(`id(`scPosImageDn), `Value, getObjectValue("scImageName", tmp_object));

    // Make sure the combo box defaults to the appropriate value
    UI::ChangeWidget(`id(`scDiskJournal), `Value, toupper(scDiskJournal));

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    scCashRegisterName = (string)UI::QueryWidget(`id(`scCashRegisterName), `Value);
	    scDiskJournal = toupper((string)UI::QueryWidget(`id(`scDiskJournal), `Value));

	    if (cn == nil || cn == "") {
		// error message
		Popup::Error(_("Name is required."));
		UI::SetFocus (`id (`cn));
		continue;
	    }
	    if (scCashRegisterName == nil || scCashRegisterName == "") {
		// error message
		Popup::Error(_("Model Type is required."));
		UI::SetFocus (`id (`scCashRegisterName));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("cn", cn, obj);
	    obj = setObjectValues("scCashRegisterName", scCashRegisterName, obj);
	    obj = setObjectValues("scPosImageDn", scPosImageDn, obj);
	    obj = setObjectValues("scDiskJournal", scDiskJournal, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else if (ret == `scPosImageDn_browse) { // browse button pressed
	    string image_dn = HandlePopupSelectscPosImage(scPosImageDn);
	    if (image_dn != nil && image_dn != "")
	    {
		tmp_objects = SleposSystemManager::GetObjectsFromLDAP("scPosImage", nil, true);
		tmp_object = getObjectFromList(image_dn, tmp_objects);
		UI::ChangeWidget(`id(`scPosImageDn), `Value,
		    getObjectValue("scImageName", tmp_object));
		scPosImageDn = image_dn;
	    }
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Returns dialog with a table summary of images with add, remove, modify buttons.
 * @return term
 */
term scPosImageTableDialog () {
    // term label
    return `Frame (_("Image Reference Objects"),
	`VBox (
	    `Table (`id("table_scPosImage"), `header (
		// table header item
		_("Image Name"),
		// table header item
		_("Image Version"),
		// table header item
		_("Image File"),
		// table header item
		_("Image Size"),
		// table header item
		_("DHCP Remote Options"),
		// table header item
		_("DHCP Local Options"),
		// table header item
		_("Config File")), []
	    ),
	`HBox (
	    `PushButton (`id("add_scPosImage"), Label::AddButton ()),
	    `PushButton (`id("modify_scPosImage"), ModifyButton ()),
	    `PushButton (`id("remove_scPosImage"), Label::RemoveButton ())
	)
    ));
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a image object (scPosImage)
 * @param string object_key (DN)
 * @return dialog result
 */
any scPosImageDetailsDialog1(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);
    list temp_object	= SleposSystemManager::temp_ldap_object;

    // frame label
    string caption = newObject ? _("Create Image Reference Object") :
	// frame label
	_("Modify Image Reference Object");

    // Must attributes
    string scImageName = getObjectValue("scImageName", temp_object);
    string scPosImageVersion = getObjectValue("scPosImageVersion",temp_object);
    string scImageFile = getObjectValue("scImageFile", temp_object);
    integer scBsize = tointeger(getObjectValue("scBsize", temp_object));

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`scImageName), _("Image Name"), scImageName)), // FIXME: Shouldn't we read this in from the Image.xml
	// text entry label
	`Left(`TextEntry(`id(`scPosImageVersion), _("Image Version"), scPosImageVersion)), // FIXME: Shouldn't we read this in from the Image.xml
	// text entry label
	`Left(`TextEntry(`id(`scImageFile), _("Image File"), scImageFile)), // FIXME: Browse button???
	// intfield label
	`Left(`IntField(`id(`scBsize), _("Image size"), 0, 2147483647, scBsize)) // FIXME: size in Bytes??? //FIXME: is 2147483648 valid for the max int size?? // FIXME: can this value be defaulted?
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scPosImage_details1"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    scImageName = (string)UI::QueryWidget(`id(`scImageName), `Value);
	    scPosImageVersion = (string)UI::QueryWidget(`id(`scPosImageVersion), `Value);
	    scImageFile = (string)UI::QueryWidget(`id(`scImageFile), `Value);
	    scBsize = (integer)UI::QueryWidget(`id(`scBsize), `Value);

	    if (scImageName == nil || scImageName == "") {
		// error message
		Popup::Error(_("Image name is required."));
		UI::SetFocus (`id (`scImageName));
		continue;
	    }
	    if (scPosImageVersion == nil || scPosImageVersion == "") {
		// error message
		Popup::Error(_("Image version is required."));
		UI::SetFocus (`id (`scPosImageVersion));
		continue;
	    }
	    if (scImageFile == nil || scImageFile == "") {
		// error message
		Popup::Error(_("Image file is required."));
		UI::SetFocus (`id (`scImageFile));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    temp_object = setObjectValues("cn", scImageName, temp_object); //FIXME: is it acceptable to use the scImageName as the CN?
	    temp_object = setObjectValues("scImageName", scImageName, temp_object);
	    temp_object = setObjectValues("scPosImageVersion", scPosImageVersion, temp_object);
	    temp_object = setObjectValues("scImageFile", scImageFile, temp_object);
	    temp_object = setObjectValues("scBsize", tostring(scBsize), temp_object);
	    SleposSystemManager::temp_ldap_object	= temp_object;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}



/**
 * Displays a dialog to add/modify all LDAP object values required for a image object (scPosImage)
 * @param string object_key (DN)
 * @return dialog result
 */
any scPosImageDetailsDialog2(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create Image Reference Object") :
	// frame label
	_("Modify Image Reference Object");

    list obj	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string scDhcpOptionsRemote = getObjectValue("scDhcpOptionsRemote", obj);
    string scDhcpOptionsLocal = getObjectValue("scDhcpOptionsLocal", obj);
    // May attributes
    string scConfigFile = getObjectValue("scConfigFile", obj);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry
	`Left(`TextEntry(`id(`scDhcpOptionsRemote), _("DHCP Remote Options"), scDhcpOptionsRemote)), // FIXME: how many options are possible?  Can we give them a selection box?
	// text entry
	`Left(`TextEntry(`id(`scDhcpOptionsLocal), _("DHCP Local Options"), scDhcpOptionsLocal)), // FIXME: how many options are possible?  Can we give them a selection box?
	// text entry
	`Left(`TextEntry(`id(`scConfigFile), _("Config File (optional)"), scConfigFile)) //FIXME: should we add a browse button?  Is this local to the admin server, or inside of the image?
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scPosImage_details2"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `back) {
	    break;
	}
	else if(ret == `next)
	{
	    scDhcpOptionsRemote = (string)UI::QueryWidget(`id(`scDhcpOptionsRemote), `Value);
	    scDhcpOptionsLocal = (string)UI::QueryWidget(`id(`scDhcpOptionsLocal), `Value);
	    scConfigFile = (string)UI::QueryWidget(`id(`scConfigFile), `Value);

	    if (scDhcpOptionsRemote == nil || scDhcpOptionsRemote == "")
	    {
		// error message
		Popup::Error(_("DHCP remote option is required."));
		UI::SetFocus (`id (`scDhcpOptionsRemote));
		continue;
	    }
	    if (scDhcpOptionsLocal == nil || scDhcpOptionsLocal == "") {
		// error message
		Popup::Error(_("DHCP local option is required."));
		UI::SetFocus (`id (`scDhcpOptionsLocal));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("scDhcpOptionsRemote", scDhcpOptionsRemote, obj);
	    obj = setObjectValues("scDhcpOptionsLocal", scDhcpOptionsLocal, obj);
	    obj = setObjectValues("scConfigFile", scConfigFile, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}



/**
 * Displays a dialog to add/modify all LDAP object values required for a harddisk object (scHarddisk)
 * @param string object_key (DN)
 * @return dialog result
 */
any scHarddiskDetailsDialog(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);
    list obj	= SleposSystemManager::temp_ldap_object;

    // frame label
    string caption = newObject ? _("Create Hard Disk") :
	// frame label
	_("Modify Hard Disk");

    // Must attributes
    string cn = getObjectValue("cn", obj);
    string scDevice = getObjectValue("scDevice", obj);
    string scPartitionsTable = getObjectValue("scPartitionsTable", obj);
    integer scHdSize = tointeger(getObjectValue("scHdSize", obj));

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`scDevice), _("Device"), scDevice)),
	// intfield label
	`Left(`IntField(`id(`scHdSize), _("Hard Disk Size"), 0, 2147483647, scHdSize)), // FIXME: size in K, MB, GB??? //FIXME: is 2147483648 valid for the max int size?? // FIXME: is it too small for valid disk sizes?
	// text entry label
	`Left(`TextEntry(`id(`scPartitionsTable), _("Partitions Table"), scPartitionsTable))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scHarddisk_details"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    scDevice = (string)UI::QueryWidget(`id(`scDevice), `Value);
	    scHdSize = (integer)UI::QueryWidget(`id(`scHdSize), `Value);
	    scPartitionsTable = (string)UI::QueryWidget(`id(`scPartitionsTable), `Value);

	    if (scDevice == nil || scDevice == "") {
		// error message
		Popup::Error(_("Device required."));
		continue;
	    }
	    if (scPartitionsTable == nil || scPartitionsTable == "") {
		// error message
		Popup::Error(_("Partition table required."));
		continue;
	    }
	    // figure out a cn value using the scDevice
	    cn = regexpsub(scDevice, "(.*)\/(.*)", "\\2");

	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("cn", cn, obj);
	    obj = setObjectValues("scDevice", scDevice, obj);
	    obj = setObjectValues("scHdSize", tostring(scHdSize), obj);
	    obj = setObjectValues("scPartitionsTable", scPartitionsTable, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW SleposSystemManager::temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}



/**
 * Displays a dialog to add/modify all LDAP object values required for a RAM disk object (scRamDisk)
 * @param string object_key (DN)
 * @return dialog result
 */
any scRamDiskDetailsDialog(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);
    // frame label
    string caption = newObject ? _("Create RAM Disk") :
	// frame label
	_("Modify RAM Disk");

    // Must attributes
    string cn = getObjectValue("cn", SleposSystemManager::temp_ldap_object);
    string scDevice = getObjectValue("scDevice", SleposSystemManager::temp_ldap_object);
    // set some defaults for values that do not exist.
    if (scDevice == nil || scDevice == "") scDevice = "/dev/ram1";

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry
	`Left(`TextEntry(`id(`scDevice), _("Device"), scDevice))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scRamDisk_details"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    scDevice = (string)UI::QueryWidget(`id(`scDevice), `Value);
	    if (scDevice == nil || scDevice == "") {
		// error message
		Popup::Error(_("Device is required."));
		UI::SetFocus (`id (`scDevice));
		continue;
	    }
	    else if (scDevice == "/dev/ram0") {
		// error message
		Popup::Error(_("The device /dev/ram0 should not be used\nsince it is used for the initial RAM disk.\n\nTry using /dev/ram1 instead.\n"));
		UI::SetFocus (`id (`scDevice));
		continue;
	    }
	    // figure out a cn value using the scDevice
	    cn = regexpsub(scDevice, "(.*)\/(.*)", "\\2");

	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object =
		setObjectValues("cn", cn, SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object =
		setObjectValues("scDevice", scDevice, SleposSystemManager::temp_ldap_object);
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a network card object (scNetworkcard)
 * @param string object_key (DN)
 * @return dialog result
 */
any scNetworkcardDetailsDialog(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    init_temp_ldap_object (object_key);
    // frame label
    string caption = newObject ? _("Create Network Card") :
	// frame label
	_("Modify Network Card");

    list obj	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string scDevice = getObjectValue("scDevice", obj);
    string ipHostNumber = getObjectValue("ipHostNumber", obj);
    // May attributes
    string macAddress = getObjectValue("macAddress", obj);
    string scModul = getObjectValue("scModul", obj);
    string scModulOption = getObjectValue("scModulOption", obj);
    string ipNetmaskNumber = getObjectValue("ipNetmaskNumber", obj);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry
	`Left(`TextEntry(`id(`scDevice), _("Device"), scDevice)),
	// text entry
	`Left(`TextEntry(`id(`ipHostNumber), _("IP Address"), ipHostNumber)),
	// text entry
	`Left(`TextEntry(`id(`macAddress), _("MAC Address (optional)"), macAddress)),
	// text entry
	`Left(`TextEntry(`id(`scModul), _("scModul (optional)"), scModul)), // FIXME: what to call this?
	// text entry
	`Left(`TextEntry(`id(`scModulOption), _("scModulOption (optional)"), scModulOption)), // FIXME: what to call this?
	// text entry
	`Left(`TextEntry(`id(`ipNetmaskNumber), _("Netmask (optional)"), ipNetmaskNumber))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scNetworkcard_details"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    scDevice = (string)UI::QueryWidget(`id(`scDevice), `Value);
	    ipHostNumber = (string)UI::QueryWidget(`id(`ipHostNumber), `Value);
	    macAddress = (string)UI::QueryWidget(`id(`macAddress), `Value);
	    scModul = (string)UI::QueryWidget(`id(`scModul), `Value);
	    scModulOption = (string)UI::QueryWidget(`id(`scModulOption), `Value);
	    ipNetmaskNumber = (string)UI::QueryWidget(`id(`ipNetmaskNumber), `Value);

	    if (scDevice == nil || scDevice == "") {
		// error messagee
		Popup::Error(_("Device is required."));
		UI::SetFocus (`id (`scDevice));
		continue;
	    }
	    // text entry label
	    if (!ValidateIPMsg (ipHostNumber, _("IP Address")))
		continue;

	    // check the validity of the Netmask field if a value is supplied
	    if (ipNetmaskNumber != nil && ipNetmaskNumber != "" && !IP::Check(ipNetmaskNumber))
	    {
		// error message
		Popup::Error (sformat(_("Netmask contains an invalid entry.\n\n%1"), IP::Valid4()));
		UI::SetFocus (`id (`ipNetmaskNumber));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("scDevice", scDevice, obj);
	    obj = setObjectValues("ipHostNumber", ipHostNumber, obj);
	    obj = setObjectValues("macAddress", macAddress, obj);
	    obj = setObjectValues("scModul", scModul, obj);
	    obj = setObjectValues("scModulOption", scModulOption, obj);
	    obj = setObjectValues("ipNetmaskNumber", ipNetmaskNumber, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a high availabilty service object (scHAService)
 * @param string object_key (DN)
 * @return dialog result
 */
any scHAServiceDetailsDialog1(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create High Availabilty Service") :
	// frame label
	_("Modify High Availabilty Service");

    init_temp_ldap_object (object_key);
    list obj	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", obj);
    string ipHostNumber = getObjectValue("ipHostNumber", obj);
    string scDnsName = getObjectValue("scDnsName", obj);
    string scServiceName = getObjectValue("scServiceName", obj);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`cn), _("Name"), cn)),
	// text entry label
	`Left(`TextEntry(`id(`ipHostNumber), _("IP Address"), ipHostNumber)),
	// text entry label
	`Left(`TextEntry(`id(`scDnsName), _("DNS Name"), scDnsName)),
	// text entry label
	`Left(`TextEntry(`id(`scServiceName), _("Service Name"), scServiceName))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scHAService_details1"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    ipHostNumber = (string)UI::QueryWidget(`id(`ipHostNumber), `Value);
	    scDnsName = (string)UI::QueryWidget(`id(`scDnsName), `Value);
	    scServiceName = (string)UI::QueryWidget(`id(`scServiceName), `Value);

	    if (cn == nil || cn == "")
	    {
		// error message
		Popup::Error(_("Name required."));
		UI::SetFocus (`id (`cn));
		continue;
	    }
	    //text entry label
	    if (!ValidateIPMsg (ipHostNumber, _("IP Address")))
		continue;
	    if (scDnsName == nil || scDnsName == "")
	    {
		// error message
		Popup::Error(_("DNS Name required."));
		UI::SetFocus (`id (`scDnsName));
		continue;
	    }
	    if (scServiceName == nil || scServiceName == "")
	    {
		// error message
		Popup::Error(_("Service Name required."));
		UI::SetFocus (`id (`scServiceName));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("cn", cn, obj);
	    obj = setObjectValues("ipHostNumber", ipHostNumber, obj);
	    obj = setObjectValues("scDnsName", scDnsName, obj);
	    obj = setObjectValues("scServiceName", scServiceName, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a high availabilty service object (scHAService)
 * @param string object_key (DN)
 * @return dialog result
 */
any scHAServiceDetailsDialog2(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create High Availabilty Service") :
	// frame label
	_("Modify High Availabilty Service");

    init_temp_ldap_object (object_key);
    list obj	= SleposSystemManager::temp_ldap_object;
    // Must attributes
    string scServiceStatus = getObjectValue("scServiceStatus", obj);
    string scServiceStartScript = getObjectValue("scServiceStartScript", obj);
    string scPrimaryService = getObjectValue("scPrimaryService", obj);
    // May attributes
    string scDevice = getObjectValue("scDevice", obj);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`scServiceStatus), _("Service Status"), scServiceStatus)), // FIXME: are there a finite number of values of this field that we may use a ComboBox instead to dispaly those values?
	// text entry label
	`Left(`TextEntry(`id(`scServiceStartScript), _("Service Start Script"), scServiceStartScript)),
	// text entry label
	`Left(`TextEntry(`id(`scPrimaryService), _("Primary Service"), scPrimaryService)),
	// text entry label
	`Left(`TextEntry(`id(`scDevice), _("Device (optional)"), scDevice))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scHAService_details2"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if(ret == `next)
	{
	    scServiceStatus = (string)UI::QueryWidget(`id(`scServiceStatus), `Value);
	    scServiceStartScript = (string)UI::QueryWidget(`id(`scServiceStartScript), `Value);
	    scPrimaryService = (string)UI::QueryWidget(`id(`scPrimaryService), `Value);
	    scDevice = (string)UI::QueryWidget(`id(`scDevice), `Value);
	    if (scServiceStatus == nil || scServiceStatus == "") {
		// error message
		Popup::Error(_("Service Status is required."));
		UI::SetFocus (`id (`scServiceStatus));
		continue;
	    }
	    if (scServiceStartScript == nil || scServiceStartScript == "") { // FIXME: should we also check the validity of this value to be sure a valid path name was given?
		// error message
		Popup::Error(_("Service Start Script is required."));
		UI::SetFocus (`id (`scServiceStartScript));
		continue;
	    }
	    if (scPrimaryService == nil || scPrimaryService == "") {
		// error message
		Popup::Error(_("Primary Service is required."));
		UI::SetFocus (`id (`scPrimaryService));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("scServiceStatus", scServiceStatus, obj);
	    obj = setObjectValues("scServiceStartScript", scServiceStartScript, obj);
	    obj = setObjectValues("scPrimaryService", scPrimaryService, obj);
	    obj = setObjectValues("scDevice", scDevice, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}




/**
 * Displays a dialog to add/modify all LDAP object values required for a server service object (scService)
 * @param string object_key (DN)
 * @return dialog result
 */
any scServiceDetailsDialog1(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create Service") :
	// frame label
	_("Modify Service");

    init_temp_ldap_object (object_key);
    list obj	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", obj);
    string ipHostNumber = getObjectValue("ipHostNumber", obj);
    string scDnsName = getObjectValue("scDnsName", obj);
    string scServiceName = getObjectValue("scServiceName", obj);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`cn), _("Name"), cn)),
	// text entry label
	`Left(`TextEntry(`id(`ipHostNumber), _("IP Address"), ipHostNumber)),
	// text entry label
	`Left(`TextEntry(`id(`scDnsName), _("DNS Name"), scDnsName)),
	// text entry label
	`Left(`TextEntry(`id(`scServiceName), _("Service Name"), scServiceName))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scService_details1"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    ipHostNumber = (string)UI::QueryWidget(`id(`ipHostNumber), `Value);
	    scDnsName = (string)UI::QueryWidget(`id(`scDnsName), `Value);
	    scServiceName = (string)UI::QueryWidget(`id(`scServiceName), `Value);

	    if (cn == nil || cn == "") {
		// error messahe
		Popup::Error(_("Name is required."));
		continue;
	    }
	    // text entry label
	    if (!ValidateIPMsg(ipHostNumber, _("IP Address")))
		    continue;
	    if (scDnsName == nil || scDnsName == "") {
		// error messahe
		Popup::Error(_("DNS Name is required."));
		continue;
	    }
	    if (scServiceName == nil || scServiceName == "") {
		// error messahe
		Popup::Error(_("Service Name is required."));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("cn", cn, obj);
	    obj = setObjectValues("ipHostNumber", ipHostNumber, obj);
	    obj = setObjectValues("scDnsName", scDnsName, obj);
	    obj = setObjectValues("scServiceName", scServiceName, obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a server service object (scService)
 * @param string object_key (DN)
 * @return dialog result
 */
any scServiceDetailsDialog2(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create Service") :
	// frame label
	_("Modify Service");

    // Must attributes
    string scServiceStatus = getObjectValue("scServiceStatus", SleposSystemManager::temp_ldap_object);
    string scServiceStartScript = getObjectValue("scServiceStartScript", SleposSystemManager::temp_ldap_object);
    // May attributes
    string scServiceEmail = getObjectValue("scServiceEmail", SleposSystemManager::temp_ldap_object);

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`scServiceStatus), _("Service Status"), scServiceStatus)), // FIXME: are there a finite number of values of this field that we may use a ComboBox instead to dispaly those values?
	// text entry label
	`Left(`TextEntry(`id(`scServiceStartScript), _("Service Start Script"), scServiceStartScript)),
	// text entry label
	`Left(`TextEntry(`id(`scServiceEmail), _("Service Email (optional)"), scServiceEmail))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scService_details2"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if (ret == `next)
	{
	    scServiceStatus = (string)UI::QueryWidget(`id(`scServiceStatus), `Value);
	    scServiceStartScript = (string)UI::QueryWidget(`id(`scServiceStartScript), `Value);
	    scServiceEmail = (string)UI::QueryWidget(`id(`scServiceEmail), `Value);

	    if (scServiceStatus == nil || scServiceStatus == "") {
		// error message
		Popup::Error(_("Service Status is required."));
		UI::SetFocus (`id (`scServiceStatus));
		continue;
	    }
	    if (scServiceStartScript == nil || scServiceStartScript == "") { // FIXME: should we also check the validity of this value to be sure a valid path name was given?
		// error message
		Popup::Error(_("Service Start Script is required."));
		UI::SetFocus (`id (`scServiceStartScript));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object = setObjectValues (
		"scServiceStatus", scServiceStatus, SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object = setObjectValues (
		"scServiceStartScript", scServiceStartScript,SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object = setObjectValues (
		"scServiceEmail", scServiceEmail, SleposSystemManager::temp_ldap_object);
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}

/**
 * Displays a dialog to add/modify all LDAP object values required for a file-based configuration template object (scConfigFileSyncTemplate)
 * @param string object_key (DN)
 * @return dialog result
 */
any scConfigFileSyncTemplateDetailsDialog1(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create File-Based Configuration Template") :
	// frame label
	_("Modify File-Based Configuration Template");
    init_temp_ldap_object (object_key);
    list obj	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", obj);
    string scMust = getObjectValue("scMust", obj);
    string scConfigFile = getObjectValue("scConfigFile", obj);
    integer scBsize = tointeger(getObjectValue("scBsize", obj));

    term contents = `HVSquash(`Frame( caption, `VBox(
	// textentry label
	`Left(`TextEntry(`id(`cn), _("Name"), cn)),
	// textentry label
	`Left(`TextEntry(`id(`scMust), _("scMust"), scMust)), // FIXME: what should this be called???
	// textentry label
	`Left(`TextEntry(`id(`scConfigFile), _("Config File"), scConfigFile)), // add a browse button???
	// textentry label
	`Left(`IntField(`id(`scBsize), _("File Size"), 0, 2147483647, scBsize)) // FIXME: size in Bytes??? //FIXME: is 2147483648 valid for the max int size?? // FIXME: can this value be defaulted?
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scConfigFileSyncTemplate_details1"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    scMust = (string)UI::QueryWidget(`id(`scMust), `Value);
	    scConfigFile = (string)UI::QueryWidget(`id(`scConfigFile), `Value);
	    scBsize = (integer)UI::QueryWidget(`id(`scBsize), `Value);

	    if (cn == nil || cn == "") {
		// error messahe
		Popup::Error(_("Name is required."));
		UI::SetFocus (`id (`cn));
		continue;
	    }
	    if (scMust == nil || scMust == "") {
		// error messahe
		Popup::Error(_("FIXME: scMust??? is required.")); // FIXME: what should this be called?
		UI::SetFocus (`id (`scMust));
		continue;
	    }
	    if (scConfigFile == nil || scConfigFile == "") {
		// error messahe
		Popup::Error(_("Config File is required.")); // FIXME: should we also check the validity of this value to be sure a valid path name was given?
		UI::SetFocus (`id (`scConfigFile));
		continue;
	    }

	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("cn", cn, obj);
	    obj = setObjectValues("scMust", scMust, obj);
	    obj = setObjectValues("scConfigFile", scConfigFile, obj);
	    obj = setObjectValues("scBsize", tostring(scBsize), obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a file-based configuration template object (scConfigFileSyncTemplate)
 * @param string object_key (DN)
 * @return dialog result
 */
any scConfigFileSyncTemplateDetailsDialog2(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create File-Based Configuration Template") :
	// frame label
	_("Modify File-Based Configuration Template");

    // Must attributes
    string scConfigFileLocalPath =
	getObjectValue("scConfigFileLocalPath", SleposSystemManager::temp_ldap_object);
    // May attributes
    string scConfigMd5 = getObjectValue("scConfigMd5", SleposSystemManager::temp_ldap_object);
    string description = getObjectValue("description", SleposSystemManager::temp_ldap_object);	

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`scConfigFileLocalPath), _("Config File Local Path"), scConfigFileLocalPath)), // add a browse button???
	// text entry label
	`Left(`TextEntry(`id(`scConfigMd5), _("Config File MD5 (optional)"), scConfigMd5)),
	// text entry label
	`Left(`TextEntry(`id(`description), _("Description (optional)"), description))
    )));

    Wizard::SetContentsButtons(caption, contents,HelpForDialog("scConfigFileSyncTemplate_details2"),
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if(ret == `next)
	{
	    scConfigFileLocalPath = (string)UI::QueryWidget(`id(`scConfigFileLocalPath), `Value);
	    scConfigMd5 = (string)UI::QueryWidget(`id(`scConfigMd5), `Value);
	    description = (string)UI::QueryWidget(`id(`description), `Value);

 // FIXME: should we also check the validity of this value to be sure a valid path name was given?
	    if (scConfigFileLocalPath == nil || scConfigFileLocalPath == "")
	    {
		// error message
		Popup::Error(_("Config File Local Path is required."));
		UI::SetFocus (`id (`scConfigFileLocalPath));
		continue;
	    }
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object = setObjectValues ("scConfigFileLocalPath",
		scConfigFileLocalPath, SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object = setObjectValues (
		"scConfigMd5", scConfigMd5, SleposSystemManager::temp_ldap_object);
	    SleposSystemManager::temp_ldap_object = setObjectValues (
		"description", description, SleposSystemManager::temp_ldap_object);
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a LDAP-based configuration template object (scConfigFileTemplate)
 * @param string object_key (DN)
 * @return dialog result
 */
any scConfigFileTemplateDetailsDialog1(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create LDAP-Based Configuration Template") :
	// frame label
	_("Modify LDAP-Based Configuration Template");

    init_temp_ldap_object (object_key);
    list obj	= SleposSystemManager::temp_ldap_object;

    // Must attributes
    string cn = getObjectValue("cn", obj);
    string scMust = getObjectValue("scMust", obj);
    string scConfigFile = getObjectValue("scConfigFile", obj);
    integer scBsize = tointeger(getObjectValue("scBsize", obj));

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id(`cn), _("Name"), cn)),
	// text entry label
	`Left(`TextEntry(`id(`scMust), _("scMust"), scMust)), // what should this be called???
	// text entry label
	`Left(`TextEntry(`id(`scConfigFile), _("Config File"), scConfigFile)), // add browse button???
	// text entry label
	`Left(`IntField(`id(`scBsize), _("Size"), 0, 2147483647, scBsize)) // FIXME: size in Bytes??? //FIXME: is 2147483648 valid for the max int size?? // FIXME: can this value be defaulted?
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scConfigFileTemplate_details1"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `next)
	{
	    cn = (string)UI::QueryWidget(`id(`cn), `Value);
	    scMust = (string)UI::QueryWidget(`id(`scMust), `Value);
	    scConfigFile = (string)UI::QueryWidget(`id(`scConfigFile), `Value);
	    scBsize = (integer)UI::QueryWidget(`id(`scBsize), `Value);

	    if (cn == nil || cn == "")
	    {
		// error message
		Popup::Error(_("Name is required."));
		UI::SetFocus (`id (`cn));
		continue;
	    }
	    if (scMust == nil || scMust == "")
	    {
		// error message
		Popup::Error(_("FIXME: scMust??? is required.")); // FIXME: what should this be called?
		UI::SetFocus (`id (`scMust));
		continue;
	    }
	    if (scConfigFile == nil || scConfigFile == "")
	    { // FIXME: should we also check the validity of this value to be sure a valid path name was given?
		// error message
		Popup::Error(_("Config File is required."));
		UI::SetFocus (`id (`scConfigFile));
		continue;
	    }

	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    obj = setObjectValues("cn", cn, obj);
	    obj = setObjectValues("scMust", scMust, obj);
	    obj = setObjectValues("scConfigFile", scConfigFile, obj);
	    obj = setObjectValues("scBsize", tostring(scBsize), obj);
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/**
 * Displays a dialog to add/modify all LDAP object values required for a file-based configuration template object (scConfigFileTemplate)
 * @param string object_key (DN)
 * @return dialog result
 */
any scConfigFileTemplateDetailsDialog2(string object_key) {

    boolean newObject = false;
    if (object_key == nil || object_key == "") newObject = true;

    // frame label
    string caption = newObject ? _("Create LDAP-Based Configuration Template") :
	// frame label
	_("Modify LDAP-Based Configuration Template");

    list obj	= SleposSystemManager::temp_ldap_object;
    // May attributes
    string scConfigFileData = getObjectValue("scConfigFileData", obj);
    string scConfigFileParser = getObjectValue("scConfigFileParser", obj);
    string scConfigMd5 = getObjectValue("scConfigMd5", obj);
    string description = getObjectValue("description", obj);	

    term contents = `HVSquash(`Frame( caption, `VBox(
	// text entry label
	`Left(`TextEntry(`id("scConfigFileData"), _("Config File Data"), scConfigFileData)), // FIXME: should we add a really large textfield?  The data in LDAP on a working system looks like binary! Maybe add a browse button and paste the contents in the background (so the user does not have to deal with it)???
	// text entry label
	`Left(`TextEntry(`id("scConfigFileParser"), _("Config File Parser"), scConfigFileParser)),
	// text entry label
	`Left(`TextEntry(`id("scConfigMd5"), _("Config MD5"), scConfigMd5)),
	// text entry label
	`Left(`TextEntry(`id("description"), _("Description"), description))
    )));

    Wizard::SetContentsButtons(caption, contents, HelpForDialog("scConfigFileTemplate_details2"),
	Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true)
    {
	ret = UI::UserInput();
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if (ret == `back) {
	    break;
	}
	else if(ret == `next)
	{
	    y2milestone("OLD temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    foreach (string attr, [ "scConfigFileData", "scConfigFileParser", "scConfigMd5",
		"description" ],
	    {
		obj = setObjectValues (attr, (string)UI::QueryWidget (`id(attr), `Value), obj);
	    });
	    SleposSystemManager::temp_ldap_object	= obj;
	    y2milestone("NEW temp_ldap_object=%1", SleposSystemManager::temp_ldap_object);
	    break;
	}
	else
	{
	    y2error("unexpected retcode: %1", ret);
	    continue;
	}
    }
    return ret;
}


/* EOF */
}
