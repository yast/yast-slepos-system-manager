/**
 * File:        slepos-system-manager/routines.ycp
 * Package:     Configuration YaST2 slepos-system-manager
 * Summary:     common routines
 * Authors:     Michael G. Fritch <mgfritch@novell.com>, Jiri Suchomel <jsuchome@suse.cz>
 *
 * $Id$
 *
 * Common functions, shared by other files
 */
{

import "Address";
import "IP";

textdomain "slepos-system-manager";

/**
 * Validate IP address
 * @param IP address to check
 * @param name displayed to the user of the UI field for the IP address
 * @return boolean true if valid IP address
 */
boolean ValidateIPMsg( string ip, string field_name ) {
    if (ip == nil || ip == "") {
	// error message, %1 is widget label
	Popup::Error(sformat(_("%1 required."), field_name));
	return false;
    }
    else if (!IP::Check(ip)) {
	// error message, %1 is widget label, %2 is generic rule for valid entry
	Popup::Error(sformat(_("%1 contains an invalid entry.\n\n%2"), field_name, IP::Valid4()));
	return false;
    }
    return true;
}


/**
 * Validate DNS or IP address
 * @param string ip or dns address
 * @param name displayed to the user of the UI field for the IP address
 * @return boolean true if valid DNS or IP address
 */
boolean ValidateDNSorIPMsg( string ip, string field_name ) {
    if (ip == nil || ip == "") {
	// error message, %1 is widget label
	Popup::Error(sformat(_("%1 required."), field_name));
	return false;
    }
    else if ( !Address::Check(ip) ) {
	// error message, %1 is widget label, %2 is generic rule for valid entry
	Popup::Error(sformat(_("%1 contains an invalid entry.\n\n%2"), field_name, Address::Valid4()));
	return false;
    }
    return true;
}

string ModifyButton () {
    // push button label
    return ("&Modify");
}


/**
 * Removes the values for a key in a list of object values.
 * @param string key, list <list <string> > object
 * @return list <list <string> > value
 */
list removeObjectValues (string key, list ldap_object) {
    y2milestone("removeObjectValues(%1, %2)", key, ldap_object);

    if (key == nil || key == "")
    {
	y2milestone("removeObjectValues returned: %1", ldap_object);
	return ldap_object;
    }

    ldap_object = filter (list valuePair, (list<list>) ldap_object, {
	return (valuePair[0]:"" != key);
    });
    y2milestone("removeObjectValues returned: %1", ldap_object);
    return ldap_object;
}


/**
 * Sets the values for a key in a list of object values.
 * @param string key, list <list <string> > object
 * @return list <list <string> > modified object values list
 */
list setObjectValues(string key, string value, list ldap_object) {
    y2milestone("setObjectValue(%1, %2, %3)", key, value, ldap_object);
    ldap_object = removeObjectValues(key, ldap_object);
    ldap_object = add(ldap_object, [key, value]);
    y2milestone("setObjectValues returned: %1", ldap_object);
    return ldap_object;
}

/**
 * Returns the values for a key in a list of object values.
 * @param string key, list <list <string> > object
 * @return list<string> object values
 */
list<string> getObjectValues(string key, list ldap_object) {
    list<string> retval = [];
    if (key == nil || key == "") return retval;
    foreach(list valuePair, (list<list>) ldap_object, {
	if (valuePair[0]:"" == key)
	    retval = add(retval, valuePair[1]:"");
    });
    if (key == "objectClass") retval = filter (string class, retval, {
	return (tolower(class) != "top"); // remove 'top' from the list if the key is objectClass
    });
    return retval;
}

/**
 * Returns the FIRST value for a key in the a list of object values.
 * NOTE: Use getObjectValues to return a list<string> of all the values for a given key!
 * @param string key(DN), list <list <string> > ldap_object
 * @return string first value in list of values
 */
string getObjectValue(string key, list ldap_object) {
    list<string> retval = getObjectValues (key, ldap_object);
    return retval[0]:"";
}

/**
 * Returns a list containing all of the attributes(key/value) for a specific LDAP object in a list of LDAP objects
 * @param string object key (DN), list <list <list <string> > >
 * @return list <list <string> >
 */
list getObjectFromList(string object_key, list<list> objectList) {
    list retval = [];
    if (object_key == nil || object_key == "") return retval;
    foreach (list object, objectList, {
	string objectValue = getObjectValue("DN", object);
	if (objectValue == object_key) {
	    retval = object;
	    return;
	}
    });
    return retval;
}

/**
 * Returns the base of a given LDAP dn.
 * For example: cn=branch,ou=provo,o=novell,c=us -> ou=provo,o=novell,c=us
 * @param string dn
 * @return string base
 */
string getLdapBaseFromDn (string dn) {
    if (dn == nil || dn == "") return "";
    list<string> base = splitstring(dn, ",");
    base = remove(base, 0); // remove the 1st element, leaving behind the base.
    return mergestring(base, ",");
}

/**
 * Returns the domain name (DNS location) of a scLocation LDAP DN
 * Example: cn=branch,ou=provo,o=a31,c=us  --> branch.provo.a31.us
 * @param string server DN
 * @return string domain name
 */
define string GetDomainName(string dn) {
    y2debug("dn: %1", dn);
    if (dn == nil || dn == "") return "";

    // tokenize the dn using the ',' char
    list<string> tmplist = splitstring(dn, ",");

    // remove all 'cn=', 'ou=', etc.
    list<string> newlist = [];
    foreach(string tmpstr, tmplist, {
	tmpstr = regexpsub(tmpstr, ".*=(.*)", "\\1");
	newlist = add(newlist, tmpstr);
    });

    // add a '.' char between each token
    string loc =  mergestring(newlist, ".");
    y2milestone("location: %1", loc);
    return loc;
}

}
